<?xml version="1.0" encoding="utf-8"?>
<testsuite package="org.spotbugs" time="0" tests="15" errors="13" name="findbugs">
<testcase time="0" name="model/Time.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/Contract.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 21-72 
new model.Contract(int, int, Item$MutableItem, Member$MutableMember) may 
  expose internal representation by storing an externally mutable object 
  into Contract.lender 
May expose internal representation by incorporating reference to mutable 
  object 
This code stores a reference to an externally mutable object into the 
  internal representation of the object. If instances are accessed by 
  untrusted code, and unchecked changes to the mutable object would 
  compromise security or other important properties, you will need to do 
  something different. Storing a copy of the object is better approach in 
  many situations.
----------------
]]></failure>
</testcase><testcase time="0" name="view/ContractView.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="view/ItemUi.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="controller/MainController.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="model/MemberList.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 9-76 
getMembers() may expose internal representation by returning 
  MemberList.members 
May expose internal representation by returning reference to mutable object 
Returning a reference to a mutable object value stored in one of the 
  object's fields exposes the internal representation of the object. If 
  instances are accessed by untrusted code, and unchecked changes to the 
  mutable object would compromise security or other important properties, 
  you will need to do something different. Returning a new copy of the 
  object is better approach in many situations.
----------------
]]></failure>
</testcase><testcase time="0" name="controller/MemberController.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 13-212 
getMemberList() may expose internal representation by returning 
  MemberController.memberList 
May expose internal representation by returning reference to mutable object 
Returning a reference to a mutable object value stored in one of the 
  object's fields exposes the internal representation of the object. If 
  instances are accessed by untrusted code, and unchecked changes to the 
  mutable object would compromise security or other important properties, 
  you will need to do something different. Returning a new copy of the 
  object is better approach in many situations.
----------------
lines: 13-212 
getSelectedMember() may expose internal representation by returning 
  MemberController.selectedMember 
May expose internal representation by returning reference to mutable object 
Returning a reference to a mutable object value stored in one of the 
  object's fields exposes the internal representation of the object. If 
  instances are accessed by untrusted code, and unchecked changes to the 
  mutable object would compromise security or other important properties, 
  you will need to do something different. Returning a new copy of the 
  object is better approach in many situations.
----------------
]]></failure>
</testcase><testcase time="0" name="model/Member.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="view/MainUi.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="controller/App.java" classname="FindBugs Issues">
</testcase><testcase time="0" name="controller/ContractController.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 12-73 
getRunningContracts() may expose internal representation by returning 
  ContractController.savedContracts 
May expose internal representation by returning reference to mutable object 
Returning a reference to a mutable object value stored in one of the 
  object's fields exposes the internal representation of the object. If 
  instances are accessed by untrusted code, and unchecked changes to the 
  mutable object would compromise security or other important properties, 
  you will need to do something different. Returning a new copy of the 
  object is better approach in many situations.
----------------
]]></failure>
</testcase><testcase time="0" name="model/Item.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 14-254 
getFutureContracts() may expose internal representation by returning 
  Item.futureContracts 
May expose internal representation by returning reference to mutable object 
Returning a reference to a mutable object value stored in one of the 
  object's fields exposes the internal representation of the object. If 
  instances are accessed by untrusted code, and unchecked changes to the 
  mutable object would compromise security or other important properties, 
  you will need to do something different. Returning a new copy of the 
  object is better approach in many situations.
----------------
lines: 14-254 
getOldContracts() may expose internal representation by returning 
  Item.oldContracts 
May expose internal representation by returning reference to mutable object 
Returning a reference to a mutable object value stored in one of the 
  object's fields exposes the internal representation of the object. If 
  instances are accessed by untrusted code, and unchecked changes to the 
  mutable object would compromise security or other important properties, 
  you will need to do something different. Returning a new copy of the 
  object is better approach in many situations.
----------------
lines: 14-254 
getOwner() may expose internal representation by returning Item.owner 
May expose internal representation by returning reference to mutable object 
Returning a reference to a mutable object value stored in one of the 
  object's fields exposes the internal representation of the object. If 
  instances are accessed by untrusted code, and unchecked changes to the 
  mutable object would compromise security or other important properties, 
  you will need to do something different. Returning a new copy of the 
  object is better approach in many situations.
----------------
lines: 14-254 
setOwner(Member$MutableMember) may expose internal representation by 
  storing an externally mutable object into Item.owner 
May expose internal representation by incorporating reference to mutable 
  object 
This code stores a reference to an externally mutable object into the 
  internal representation of the object. If instances are accessed by 
  untrusted code, and unchecked changes to the mutable object would 
  compromise security or other important properties, you will need to do 
  something different. Storing a copy of the object is better approach in 
  many situations.
----------------
]]></failure>
</testcase><testcase time="0" name="model/MembersItemList.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 9-68 
getOwner() may expose internal representation by returning 
  MembersItemList.owner 
May expose internal representation by returning reference to mutable object 
Returning a reference to a mutable object value stored in one of the 
  object's fields exposes the internal representation of the object. If 
  instances are accessed by untrusted code, and unchecked changes to the 
  mutable object would compromise security or other important properties, 
  you will need to do something different. Returning a new copy of the 
  object is better approach in many situations.
----------------
lines: 9-68 
setOwner(Member$MutableMember) may expose internal representation by 
  storing an externally mutable object into MembersItemList.owner 
May expose internal representation by incorporating reference to mutable 
  object 
This code stores a reference to an externally mutable object into the 
  internal representation of the object. If instances are accessed by 
  untrusted code, and unchecked changes to the mutable object would 
  compromise security or other important properties, you will need to do 
  something different. Storing a copy of the object is better approach in 
  many situations.
----------------
]]></failure>
</testcase><testcase time="0" name="controller/ItemController.java" classname="FindBugs Issues">
<failure message="issues" ><![CDATA[lines: 20-241 
setCurrentItemList(MembersItemList) may expose internal representation by 
  storing an externally mutable object into 
  ItemController.currentMembersItemlist 
May expose internal representation by incorporating reference to mutable 
  object 
This code stores a reference to an externally mutable object into the 
  internal representation of the object. If instances are accessed by 
  untrusted code, and unchecked changes to the mutable object would 
  compromise security or other important properties, you will need to do 
  something different. Storing a copy of the object is better approach in 
  many situations.
----------------
lines: 210-213 
categories must be non-null but is marked as nullable 
Parameter must be non-null but is marked as nullable 
This parameter is always used in a way that requires it to be non-null, but 
  the parameter is explicitly annotated as being Nullable. Either the use 
  of the parameter or the annotation is wrong.
----------------
]]></failure>
</testcase><testcase time="0" name="view/MemberView.java" classname="FindBugs Issues">
</testcase></testsuite>